<?php

/*
 * This file is part of the TrackmeBackendBundle package.
 *
 * (c) Gonzalo Moreno C. <goncab380@hotmail.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Trackme\BackendBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * BusinessRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BusinessRepository extends EntityRepository
{
    public function getLastBusiness()
    {
        $first_day_month = date('m', strtotime("first day of this month midnight"));
        $em = $this->getEntityManager();

        $query = $em->createQuery('
            SELECT b
            FROM TrackmeBackendBundle:Business b
            WHERE b.created_at > :first_day_month')->setMaxResults(20);
        $query->setParameter('first_day_month', $first_day_month);

        return $query->getArrayResult();
    }

    public function getLastOt($business, $limit)
    {
        $em = $this->getEntityManager();

        $query = $em->createQuery('
            SELECT o, c, u, b
            FROM TrackmeBackendBundle:Ot o
            LEFT JOIN o.coordinates c
            LEFT JOIN o.user u
            LEFT JOIN u.business b
            WHERE b.id = :business AND c.lat is not null AND c.lng is not null

            ORDER BY o.id DESC');
        $query->setParameter('business', $business->getId());
        // $query->setMaxResults(2);

        return $query->getResult();

    }

    public function getUserBusiness(){

        $em = $this->getEntityManager();
        $estimate_users = 0;
        $real_users = 0;

        $query_business = $em->createQuery('
            SELECT b, u, p
            FROM TrackmeBackendBundle:Business b
            LEFT JOIN b.users u
            LEFT JOIN b.plan p
            WHERE b.enabled = 1');
        
        $business = $query_business->getResult();
        
        $query_user = $em->createQuery('
            SELECT count(u.id)
            FROM TrackmeBackendBundle:User u
            WHERE u.enabled = 1 AND u.business IS NOT NULL');

        if($query_user->getSingleScalarResult())
            $real_users = (int) $query_user->getSingleScalarResult();

        $query_user->getSingleScalarResult();

        foreach ($business as $b) {
            $estimate_users += $b->getPlan()->getUsersLimit();
        }

        if ($estimate_users >= 3 )
        {
            $division = (int)($estimate_users/3);
            $red = array('from' => 0, 'to' => $division);
            $yellow = array('from' => $division, 'to' => $division * 2);
            $green = array('from' => $division * 2, 'to' => $estimate_users);
        }
        

        return array('real' => $real_users, 'estimate' => $estimate_users, 'red' => $red, 'yellow' => $yellow, 'green' => $green);

    }
    
    public function getUserBusinessById($business_object){

        $em = $this->getEntityManager();
        $estimate_users = 0;
        $real_users = 0;

        $query_business = $em->createQuery('
            SELECT b, u, p
            FROM TrackmeBackendBundle:Business b
            LEFT JOIN b.users u
            LEFT JOIN b.plan p
            WHERE b.enabled = 1 AND b.id = :business');
        $query_business->setParameter('business', $business_object->getId());
        
        $business = $query_business->getResult();

        $query_user = $em->createQuery('
            SELECT count(u.id)
            FROM TrackmeBackendBundle:User u
            WHERE u.enabled = 1 AND u.business = :business');
        $query_user->setParameter('business', $business_object->getId());
        

        if($query_user->getSingleScalarResult())
            $real_users = (int) $query_user->getSingleScalarResult();

        $query_user->getSingleScalarResult();

        foreach ($business as $b) {
            $estimate_users += $b->getPlan()->getUsersLimit();
        }

        if ($estimate_users >= 3 )
        {
            $division = (int)($estimate_users/3);
            $red = array('from' => 0, 'to' => $division);
            $yellow = array('from' => $division, 'to' => $division * 2);
            $green = array('from' => $division * 2, 'to' => $estimate_users);
        }
        

        return array('real' => $real_users, 'estimate' => $estimate_users, 'red' => $red, 'yellow' => $yellow, 'green' => $green);

    }


}
